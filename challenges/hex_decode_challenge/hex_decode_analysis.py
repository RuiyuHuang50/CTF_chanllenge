# Save as decode_bytes.py and run: python3 decode_bytes.py
import binascii, itertools, gzip, zlib, sys, struct, base64
from collections import Counter
from string import printable

# Fixed nums list with proper comma separation
nums = [0x7e:0x25:0x1d:0x2e:0xd:0xa4:0x10:0xa7:0x25:0xbc:0x37:0xd9:0xa5:0xd3:0x58:0x64:0x13:0x17:0xc9:0x57:0x70:0x3e:0x47:0x10:0x50:0x6b:0xf4:0x56:0xfb:0x2f:0x2f:0x7a:0x55:0x4c:0xa8:0x62:0xf0:0xb8:0x9:0x15:0x74:0x40:0xee:0x19:0x13:0x47:0x7d:0x27:0x5e:0x46:0x7e:0xce:0x85:0xc5:0xdf:0xd5:0x30:0xd3:0x2b:0x2b:0x2:0x5b:0xa5:0x57:0xa7:0x4d:0xb9:0x98:0x5:0xc2:0xad:0x79:0x3:0x9c:0x93:0x16:0xe3:0x10:0x3d:0x41:0x57:0xbb:0xf:0xdc:0x80:0xee:0xb1:0xb0:0xc1:0xdc:0xdc:0xc4:0x37:0x81:0x1b:0xdf:0xcf:0xd5:0x77:0xd4:0x97:0x24:0x4e:0x9a:0xc0:0xe1:0xb1:0xa3:0xf1:0xee:0xe4:0x48:0xaa:0xf4:0x24:0x2a:0xe2:0xd5:0xdb:0xa4:0xb2:0xb7:0x68:0xe9:0x38:0x83:0xc8:0x7:0x58:0x3f:0xdc:0xf0:0x64:0x2a:0x8a:0x24:0xb:0x3b:0xc8:0xfc:0x2a:0xac:0x45:0xd4:0xa0:0x69:0xfe:0x83:0x3f:0xd9:0x27:0xf1:0x90:0x8f:0xda:0xc9:0x12:0xa3:0xd0:0x6b:0xe2:0xac:0x5b:0x46:0xd6:0xe5:0x6b:0xe1:0x21:0x33:0xde:0x4b:0xdf:0x23:0x1f:0x80:0x8c:0x1d:0x3:0xcb:0xf7:0x2a:0xbc:0x87:0xb9:0x97:0x50:0xcb:0x3a:0x21:0x36:0x1c:0xcd:0x91:0x63:0xa4:0x77:0xce:0x85:0x98:0x1:0x63:0xe3:0xe0:0x86:0x2:0x60:0x13:0x1f:0x63:0xde:0x16:0x8d:0x9b:0x9e:0x46:0x32:0xee:0x12:0x6c:0xf:0x48:0x88:0xdd:0xda:0xeb:0x81:0x51:0xb9:0x6:0xe9:0xba:0x6a:0xcc:0x9b:0xf0:0xce:0xfb:0x3:0xed:0x5f:0xe2:0x4:0xec:0x7d:0xa2:0x33:0xaf:0x90:0x45:0x1b:0xa0:0x8d:0xa3:0x7d:0x67:0x8f:0xfe:0xb8:0x48:0x4:0xa1:0x3:0x6e:0x6d:0x9e:0x5f:0x3b:0x99:0x62:0x29:0xf8:0x44:0x2d:0xe5:0xc1:0xcf:0x18:0x70:0x5f:0x5d:0x8b:0xff:0xea:0x2f:0x7c:0x52:0xbe:0x7a:0xa:0x6:0x7f:0xac:0x9:0xed:0x19:0xa7:0x4c:0x55:0x41:0xaf:0x7e:0x39:0xf3:0xab:0x1e:0xb5:0x7a:0x36:0x25:0xd9:0x93:0xb1:0xd9:0x7e:0xe0:0x55:0xd0:0x9e:0xd0:0xda:0xa4:0x4f:0x86:0xae:0x3c:0xa0:0x55:0x89:0xf5:0x96:0x38:0x73:0xd0:0x2b:0x1e:0xee:0xe0:0x98:0x25:0x6:0x71:0xb8:0xb7:0x4a:0x36:0x97:0xa0:0x6:0x35:0x70:0xe1:0xd9:0xbf:0x67:0x87:0xfb:0x7:0xdd:0x84:0xfc:0x73:0xbc:0x6f:0x43:0xe8:0x8d:0x32:0xc8:0x25:0x57:0xce:0x97:0xf:0x85:0xe1:0x46:0x1c:0x81:0x4c:0x51:0xf1:0x2d:0x2b:0xb0:0x95:0xb2:0xac:0x9c:0x8f:0x30:0x99:0x3:0xed:0x8:0x46:0xd5:0x96:0x78:0x9d:0xbb:0xcf:0x6c:0x52:0xdf:0xf1:0x34:0x25:0xe:0xb5:0x71:0x5f:0xa7:0x9f:0x8a:0x57:0x34:0x3d:0x3:0xd0:0xcc:0x34:0x69:0xcf:0x21:0x72:0x16:0xf6:0x8:0x8e:0x93:0xc3:0x5e:0xff:0x16:0x3d:0xf1:0x4a:0x62:0xff:0xff:0xd3:0x5e:0xa6:0x72:0xe9:0xfe:0xa6:0x26:0x1:0x77:0xf2:0x35:0xe0:0xc2:0x56:0x52:0xd8:0x4c:0x5a:0x66:0xe0:0x1e:0xc4:0xdf:0x34:0x1:0xd0:0x7e:0x63:0xcf:0x7d:0x37:0x2e:0x24:0xa9:0x17:0x22:0x50:0x3d:0x23:0xc7:0x2f:0x59:0xa7:0xf1:0xaf:0xfa:0xc9:0xfc:0x54:0x30:0xdc:0x72:0xf4:0xbb:0xa6:0xf6:0x8c:0x24:0x59:0x5b:0xa2:0x90:0x89:0xc6:0x3a:0xa0:0xe8:0x8a:0xdd:0xb:0x51:0xd:0x64:0xf8:0xfe:0x14:0xf2:0xc8:0x10:0x47:0xf8:0xec:0xb9:0xec:0xa7:0x60:0xe2:0x33:0x84:0x3c:0x8f:0x26:0xcc:0x18:0xec:0x6:0xb9:0xd4:0x90:0x96:0xe0:0xe1:0xa3:0x44:0xda:0xa2:0x58:0xcc:0x6a:0x68:0x13:0x62:0x54:0xcd:0x4e:0xfc:0x2d:0x31:0x2f:0xb1:0x6d:0xbe:0xd8:0x39:0xd7:0xc4:0x40:0x90:0x99:0xd0:0x26:0x79:0xb2:0xca:0xbd:0x8c:0x6c:0x16:0x58:0xd6:0x7e:0x6c:0x38:0xd3:0x39:0x86:0xcf:0x66:0xb7:0xfe:0x17:0x24:0xbd:0xef:0x5e:0x94:0xb4:0x9e:0x24:0x4d:0x6e:0x4a:0xc6:0x20:0x14:0x83:0xac:0x80:0x99:0x5:0x56:0x18:0x71:0x8e:0xeb:0xaa:0x15:0xba:0x10:0xcc:0xb8:0x27:0xf1:0x75:0x17:0x4f:0x9:0xcb:0xed:0x2d:0x18:0x5b:0x78:0xde:0x7c:0x8c:0x61:0x28:0xd:0xfb:0x2d:0x63:0x13:0x9e:0xf2:0xfe:0x48:0x7:0xb8:0x58:0xd3:0x70:0x80:0xc4:0xe6:0x97:0x13:0xef:0x62:0x0:0x1d:0x7a:0x5c:0x95:0x58:0xd8:0x21:0xb9:0x0:0x2e:0xb4:0x2e:0x92:0xc7:0xcc:0x84:0xc5:0x15:0x8b:0x7d:0x6d:0x5e:0xee:0xed:0x23:0xd4:0x84:0x36:0xc3:0xe6:0x37:0xe0:0x60:0x93:0x75:0xb8:0x6b:0x97:0x72:0x6b:0xc5:0x26:0x99:0x5a:0x5a:0x5a:0x42:0x61:0x73:0x69:0x63:0x41:0x4c:0x6c:0x59:0x53:0x74:0x72:0x49:0x4e:0x67:0x5a:0x2d:0x31:0x30:0x30:0x31:0x0:0xa3:0xcc:0xbf:0x69:0xf2:0x58:0xc0:0xe0:0xbe:0x9c:0x94:0x39:0x2:0xc5:0x22:0xc7:0xe4:0xf8:0xaf:0xd7:0x52:0xce:0x8d:0x93:0x23:0x24:0x35:0xc:0x31:0x8f:0x5f:0xd4:0x5b:0x1e:0x3d:0x4d:0x77:0xfe:0x2e:0x35:0x9a:0xc2:0x6f:0x9c:0x87:0x91:0x64:0x6b:0x89:0x13:0x42:0xdb:0xe1:0xcf:0x6f:0x5:0xf4:0xa4:0x11:0x25:0x33:0x70:0xf9:0x8e:0x8f:0x37:0xdb:0x6:0x35:0x9:0x3b:0xcf:0xcb:0xaa:0x6b:0x52:0x3b:0xcf:0xbd:0xc4:0xe3:0xff:0xa0:0xc4:0xcf:0xf:0xc9:0xc3:0xb3:0xda:0xe8:0xe6:0x4b:0xe1:0x74:0xda:0x18:0x4f:0xe0:0x4d:0x59:0x1b:0x1c:0x24:0xc6:0x88:0x77:0x1:0x57:0x34:0xc6:0x3a:0x34:0x66:0xff:0x3:0x75:0xc8:0xc6:0x28:0xa3:0xae:0xe:0xee:0x8f:0x82:0xc8:0xa8:0xd1:0xa8:0xf5:0x2a:0xc3:0x12:0x4f:0x89:0x9a:0xc6:0x8b:0xf1:0xfa:0x51:0x2c:0x2e:0xb7:0x2b:0x31:0x2c:0xf3:0xf7:0x54:0x96:0xa5:0x62:0x84:0x35:0xe4:0x4c:0xdd:0xb5:0xf4:0xd2:0xe0:0xb8:0xe4:0x2f:0x41:0x7e:0xf5:0xcc:0x70:0xef:0x1d:0x9c:0x1e:0xd4:0xc7:0x4f:0x0:0xba:0x47:0x54:0x51:0xec:0xb6:0xd5:0x21:0x9a:0x22:0xfe:0x50:0x16:0xd1:0x30:0xce:0xb5:0x5f:0x10:0x34:0x54:0xdc:0xa4:0x43:0xfa:0x40:0x61:0xce:0x7:0xb1:0xcf:0xc1:0xf8:0x23:0x12:0xe4:0xda:0xe8:0x6:0x74:0xa:0x4:0xc4:0x20:0xd5:0xf4:0xef:0x8b:0x53:0xff:0xbf:0xa7:0xdb:0x63:0xeb:0xd5:0xa3:0x4c:0xa4:0xaa:0xfd:0x73:0x6b:0xf5:0x96:0x7e:0xda:0x70:0x66:0xe0:0xe5:0x70:0xe4:0xa9:0x90:0xba:0x9e:0x7f:0x45:0xf1:0x7e:0x4:0x99:0x5a:0x67:0x84:0x2f:0xa:0xd0:0xd3:0xb4:0xce:0x46:0x1f:0xc3:0xdd:0x9d:0x9d:0x4d:0x3:0x7d:0x32:0x73:0x62:0xdc:0x4:0x1c:0x7a:0x83:0x61:0x6b:0x2:0x65:0x4:0x5c:0xcc:0x88:0x8b:0xd6:0x59:0x5f:0x8a:0x27:0xa5:0xa9:0xea:0x82:0x47:0x88:0xd0:0x4a:0x5:0x2:0xbe:0x67:0xde:0xc2:0x83:0x58:0x45:0xe4:0xc4:0x47:0x49:0xc8:0xa3:0x15:0x51:0x2f:0xeb:0xaa:0x8e:0x75:0xd1:0x33:0x1f:0xbb:0xb6:0x66:0x43:0x86:0xb0:0x49:0x88:0x6e:0xb0:0x67:0x30:0x34:0xbf:0x76:0x18:0x83:0xbd:0x62:0x4c:0x61:0x77:0x9d:0x90:0x63:0x47:0x1e:0xd8:0x18:0x51:0xf7:0xd3:0x7:0x5d:0x17:0x8d:0xe:0x60:0x16:0x7c:0x10:0x7d:0xad:0x44:0x3c:0x23:0x5d:0xc0:0xe0:0xbf:0xc:0x41:0x36:0xa9:0xd1:0x99:0xf0:0xef:0x72:0x8:0x41:0x69:0xdb:0x48:0xc7:0xf2:0xd6:0xd5:0x52:0xec:0x51:0x63:0x69:0xfe:0xa7:0xa5:0x21:0x4:0x65:0x2:0xc3:0x71:0x43:0xfa:0x1a:0x15:0x93:0xa:0x4:0x5:0x12:0x45:0x6f:0xee:0x8e:0x36:0xe0:0x64:0xb:0x33:0x50:0x5c:0x96:0xb9:0x5b:0x3d:0x5e:0x7c:0x42:0xc4:0x7e:0x5:0x35:0xc2:0xff:0x50:0xd7:0x93:0x5a:0xdb:0x98:0x6d:0x21:0x7:0x5b:0xaf:0x3d:0x3b:0x13:0x48:0x6e:0x63:0xa5:0x4:0x1c:0x0:0x42:0x7a:0x7c:0x84:0x3e:0xfb:0x89:0x74:0xbd:0x89:0xc4:0x94:0x1c:0x1e:0x6f:0xb4:0x8b:0x90:0xbc:0xe6:0x3f:0xf9:0x22:0x52:0x42:0x90:0xb5:0xe7:0x95:0xd1:0xe7:0xd7:0x4c:0x63:0x5b:0x8a:0x5e:0xe4:0xfe:0x1b:0x6d:0xc2:0xaf:0x89:0xe1:0x1f:0x3e:0x6c:0xaf:0xfa:0x53:0xef:0xf3:0x75:0x41:0x35:0x5:0xf7:0x1c:0x9a:0xc8:0x3:0x71:0x14:0x67:0xcc:0x9f:0xc5:0xb1:0x9d:0xe1:0x1e:0x60:0x90:0xa8:0x41:0xaf:0xe6:0xad:0x5f:0xe0:0x0:0x4e:0xd3:0x75:0x8f:0x9:0x7b:0x86:0x25:0x15:0x4f:0x29:0x87:0x63:0x90:0x53:0x2:0x55:0x4:0xa0:0x36:0x23:0x0:0xc7:0xcb:0x41:0x76:0xb1:0xee:0xd5:0x91:0xef:0x23:0x64:0x64:0xb3:0x6d:0xdf:0x39:0x93:0xf5:0x88:0xbc:0x7c:0xec:0x4c:0xcf:0xee:0xa1:0xd4:0x8e:0xd8:0xf7:0x8e:0x9f:0xc2:0xcf:0x15:0x73:0xbe:0xeb:0x4:0xad:0xe:0x68:0x11:0xc1:0xd6:0xf1:0xfb:0x69:0xe6:0x83:0x25:0x62:0x6f:0x71:0x31:0x5e:0x12:0x5:0xec:0xea:0xfc:0x7b:0x89:0xbe:0x4a:0x9f:0x31:0x8:0x8a:0x35:0xb5:0x98:0x9e:0xc7:0x5a:0x74:0xb8:0x55:0xdd:0x9e:0xd8:0x2:0x0:0x48:0x73:0x31:0xa6:0x85:0x37:0x92:0x70:0x33:0xd:0xf9:0xf2:0x58:0x98:0x23:0x60:0x22:0x59:0x16:0xbb:0xf7:0xdd:0x15:0x6b:0x95:0x6a:0x48:0x33:0x42:0x4a:0x33:0x8a:0xbd:0x64:0x30:0x42:0x9b:0xc3:0xb2:0xcf:0xd0:0xac:0xc1:0x28:0x44:0xe4:0x89:0x67:0x3d:0x9f:0x22:0x34:0x7c:0x37:0x9f:0x11:0xa1:0xe7:0x44:0xe3:0x31:0x77:0x6e:0xee:0xdb:0x9e:0x31:0x77:0x61:0xe3:0x46:0x32:0x8f:0x7:0x5a:0xd4:0xeb:0xe3:0x3b:0x29:0x82:0x5d:0x5d:0xfe:0x94:0xfd:0xf:0x35:0xe4:0x53:0x18:0x16:0xca:0x86:0x4:0xa6:0x25:0x35:0x1d:0x86:0x19:0x63:0xb8:0xa8:0x6a:0x13:0x7c:0x55:0xf6:0xb7:0x7e:0x79:0x14:0xdc:0x77:0xa8:0xd9:0x87:0xdd:0xbd:0xda:0xf6:0xd3:0xa5:0x7c:0xd8:0x4b:0xa1:0xd:0x68:0x28:0x26:0xcb:0xe0:0xcf:0x35:0xf3:0x4b:0x8a:0xea:0x3:0x9:0x63:0x17:0xe5:0xda:0xc0:0xbe:0x61:0x9d:0x7b:0x3c:0x93:0x4f:0xe1:0x10:0x27:0x2c:0xb1:0x34:0x94:0xd9:0x5b:0x5f:0xba:0x2a:0x94:0xad:0x75:0x1e:0x97:0x78:0x27:0xfa:0x90:0xc:0xd5:0x50:0xca:0x36:0xed:0x46:0x72:0x81:0x95:0x53:0x91:0xbc:0x7f:0x42:0xf0:0x13:0x1c:0x4b:0x72:0xd6:0x75:0x6:0x83:0xeb:0x25:0x1b:0x63:0x4c:0x15:0xf3:0x59:0xea:0x43:0x23:0x21:0x31:0x69:0x93:0xb2:0xfe:0xe7:0x43:0xba:0x66:0x85:0xab:0x7a:0xa1:0xf6:0xec:0x77:0x6c:0xf3:0xfb:0x57:0x18:0x16:0xba:0x64:0x2b:0xae:0xbd:0x16:0xf1:0xe1:0x37:0x22:0x4a:0xca:0xd4:0x49:0xb1:0x17:0x3:0x18:0x9d:0xae:0x92:0x3e:0xa5:0x7e:0xb6:0x11:0x71:0xb1:0x68:0x89:0xc7:0x22:0xee:0xf2:0xd0:0xab:0x8:0xc2:0x8c:0x3f:0xe4:0xd7:0xa:0xb9:0x20:0xbb:0xd0:0x23:0xd3:0x6d:0xd2:0x65:0xac:0x77:0xe4:0x62:0x88:0x55:0x13:0xf0:0xdf:0xda:0x12:0xcd:0xcc:0xe3:0x78:0xd5:0xa5:0x5:0x14:0x89:0xdc:0x1e:0x42:0xfc:0xda:0x13:0x1f:0xad:0x80:0xf1:0x13:0x2c:0x68:0xf7:0x8e:0xf0:0x4c:0xa1:0xe0:0x2b:0x7b:0xf3:0xf8:0x48:0xd6:0x71:0x1d:0x7b:0x76:0x31:0x4:0x52:0x50:0x47:0x4e:0x2a:0x5a:0x6d:0xd7:0xda:0x5f:0xea:0x7:0xc7:0xe1:0x95:0xb8:0x2e:0x37:0x98:0x59:0xb2:0x8b:0x52:0xfa:0x61:0xc3:0x17:0xdc:0x39:0x49:0xe1:0x8b:0x99:0x28:0xd9:0xc3:0x82:0x46:0x9a:0x5c:0xa5:0x85:0x63:0x6d:0x66:0xf9:0x25:0x94:0x30:0xbd:0xee:0xe2:0x49:0x40:0xdd:0xaa:0x3:0xf4:0x87:0x3c:0x3d:0x68:0xc7:0xd6:0x90:0xa0:0x99:0x12:0xe6:0x34:0x6e:0x8c:0xb9:0xd2:0xf9:0x1f:0xcb:0x1e:0xb4:0xfb:0xdb:0xa2:0xdd:0x24:0xe2:0xba:0xcf:0xe5:0xaf:0x56:0x21:0xec:0xbe:0xe8:0xc3:0x4e:0x88:0x5c:0x60:0x6e:0x90:0xce:0xfa:0x49:0xa0:0xf3:0x69:0x6b:0x11:0x1d:0x66:0xed:0xbf:0x44:0x11:0xa1:0xfe:0xe0:0x86:0xad:0x36:0xa7:0x9a:0xf4:0x8f:0x5d:0x42:0x17:0xb9:0xa2:0x85:0x4a:0x71:0x80:0x93:0x11:0x73:0xfc:0x7d:0x85:0x19:0xe3:0x72:0xd8:0x27:0x83:0x79:0x26:0x64:0xff:0xd3:0x9a:0xa6:0x6d:0x8f:0x35:0xca:0xd1:0x4c:0x84:0x74:0xd2:0xce:0xe5:0x52:0x61:0xf6:0xc5:0x5e:0x73:0x4a:0x77:0x57:0xbc:0x50:0x7e:0x40:0xc9:0xa4:0xa4:0xc9:0x78:0x3e:0x6f:0xe5:0xcd:0xa5:0xb0:0x9f:0xf1:0x34:0x13:0xc3:0x2:0xf8:0x15:0x63:0xee:0xdb:0xc1:0x62:0x25:0x39:0xb9:0xe2:0x89:0x37:0x22:0x52:0xdc:0xc6:0x1b:0x54:0x4:0x8b:0x39:0xd2:0x30:0xe9:0x71:0x21:0x1d:0x84:0xe5:0x1f:0x7c:0xfa:0x83:0x6a:0xd5:0x44:0xcc:0xfb:0x7d:0x85:0xdd:0x6:0xbd:0xff:0x59:0x99:0xc5:0x74:0xed:0xc9:0xff:0x26:0x9b:0x2f:0x10:0xc:0x51:0x2d:0x90:0x36:0x4d:0xc:0x30:0xd0:0x77:0x6:0x14:0x43:0x1:0x92:0xc9:0xde:0x98:0x86:0xdd:0xf1:0x1f:0xa2:0x66:0xc:0x6b:0x65:0x32:0x7:0x95:0x42:0x13:0xe6:0x70:0xa4:0x1c:0xbd:0xb0:0x4c:0x8d:0x27:0x52:0xa1:0x6b:0x53:0x33:0x34:0x31:0xcc:0xba:0xe:0xbd:0xd9:0xb0:0x23:0xe5:0x1c:0x89:0x17:0x23:0x1e:0x5a:0x36:0x4:0xca:0xda:0x20:0x87:0x8b:0x6c:0x14:0xb2:0xbf:0xb5:0x1d:0x12:0xe9:0x51:0x44:0xb5:0xb:0x52:0x72:0xe4:0x3:0x96:0xc9:0x1f:0x1f:0xe1:0x42:0x3d:0x3b:0x78:0x41:0x5:0x53:0x61:0x8c:0xde:0xcd:0xa0:0x90:0x8c:0x55:0xae:0x9f:0x3e:0xff:0xe3:0xf3:0xb:0x35:0x66:0xef:0x38:0xfc:0xb9:0x57:0x1b:0x9a:0x99:0x58:0xd5:0x12:0x99:0xda:0x65:0xfa:0x66:0x43:0xc7:0x6:0xd3:0x54:0x5b:0x81:0xf3:0x9a:0x81:0xd6:0x8d:0x8c:0xb:0xf3:0x7b:0x44:0xef:0x34:0x9b:0xa:0xce:0x35:0x62:0xa3:0x47:0xfb:0x7d:0xac:0xf5:0xe3:0xef:0xbd:0xe9:0xc2:0x11:0x45:0x44:0x4:0xdf:0xc5:0xda:0x6c:0x51:0xe5:0x60:0xcc:0x29:0x4f:0x1:0xc5:0x5a:0xcf:0xfa:0xbc:0x73:0x41:0xb8:0xf0:0xed:0xad:0xd4:0xdc:0x6a:0xbd:0x9e:0x7b:0x2:0xe2:0x7f:0xe1:0xa7:0x59:0x4e:0xf8:0x3f:0xae:0xc5:0x68:0xfd:0xc6:0x2d:0x57:0x95:0x27:0x14:0x8:0x68:0xcc:0xf9:0x55:0x79:0xcd:0x31:0xe4:0x8a:0xd0:0x5f:0x8d:0xb2:0xdf:0x6e:0x5a:0x38:0xbc:0x52:0x77:0x6a:0x17:0xe0:0x68:0xdd:0xd:0xbf:0x73:0x35:0xd3:0x7b:0x9d:0x9f:0x74:0xf3:0x19:0x41:0x24:0xfd:0xcc:0xf4:0x5c:0x59:0xa7:0x3b:0xc7:0x1:0x74:0x84:0x53:0xeb:0xee:0x6b:0xcb:0x56:0x48:0xd9:0x16:0xbb:0xe:0xe9:0x37:0xab:0x89:0xab:0x9e:0xa2:0xed:0xc3:0x9f:0xb9:0xb7:0xfb:0x12:0x5e:0x37:0xd9:0x5f:0xab:0x5d:0xb3:0x96:0x4c:0x1e:0x62:0xa2:0x66:0x3b:0xb8:0x22:0x49:0xa2:0x59:0xf4:0x2b:0x4:0x93:0xcd:0xf1:0x56:0x6c:0xaa:0xd:0x67:0xbc:0x6c:0x9e:0x96:0xcb:0x49:0xf3:0x7e:0xe0:0x3f:0x9c:0x42:0xe2:0x3:0x7d:0x9a:0x25:0xc6:0x3c:0x7e:0xba:0x67:0x82:0x4d:0x34:0x74:0xa3:0xa0:0x1e:0xb1:0x8:0xdb:0x1d:0xa6:0x71:0xe8:0xf0:0x64:0x67:0xd0:0xa4:0x3:0x12:0x86:0x6:0x8f:0x20:0x2b:0x55:0x5d:0xa9:0xf:0xc4:0x2c:0x5d:0xf9:0xa0:0x0:0x99:0xbe:0xb1:0xa1:0x99:0xce:0x48:0xa:0xb7:0x38:0x6f:0x1e:0x8:0x13:0x21:0x1a:0x99:0x28:0xa9:0xb9:0x53:0xfe:0x16:0xfd:0xd:0xdb:0x29:0x6a:0xd4:0xc9:0x6b:0x6d:0x87:0x1c:0xf:0x21:0xeb:0x57:0x2b:0xa2:0x8f:0x9a:0xc0:0x97:0xad:0xe1:0xb1:0x46:0x9:0x5a:0x0:0x5d:0x58:0x16:0x5a:0x65:0xf1:0x83:0xd0:0xc5:0x4c:0x3b:0x33:0xd3:0x57:0x42:0xf4:0x42:0x99:0x20:0xe4:0x28:0xba:0xa4:0xbf:0x68:0x86:0x70:0xae:0x8f:0xca:0xae:0xec:0x22:0xc5:0x46:0x87:0xb6:0xc9:0x57:0x7c:0x15:0x92:0xaf:0xe9:0xea:0xf1:0xdd:0x2c:0x8a:0xfd:0x11:0xb2:0xb8:0xb5:0x71:0x20:0x3b:0xe1:0xce:0xcb:0xab:0x7d:0xb7:0xcd:0x42:0xfe:0x54:0xf8:0xc7:0xac:0x74:0xdd:0x3e:0x23:0xc6:0x28:0x14:0xa3:0x55:0x9e:0xa1:0x66:0x50:0x59:0x1b:0xc1:0x79:0x57:0xa2:0x47:0x22:0x4d:0xc4:0xd9:0x1a:0x6:0xd7:0x6f:0xff:0x9f:0x1b:0x73:0x7c:0x59:0x97:0x42:0x82:0xab:0xe5:0xd7:0x4a:0x86:0x3d:0x9a:0xdf:0x58:0x5c:0x58:0xaf:0xfe:0xa0:0xd1:0x4c:0x64:0xab:0x66:0x6b:0x82:0xd5:0x6a:0x21:0xf0:0xdd:0x9d:0x4a:0x74:0xdf:0xcc:0x20:0xc5:0xa3:0x6a:0x4b:0xe0:0x4:0x2b:0x38:0x60:0x83:0xe8:0x5f:0x23:0xb9:0xab:0x88:0x64:0x11:0xf3:0xe7:0xe7:0x5d:0x8:0xd7:0x3a:0xa6:0x21:0xaf:0x85:0xed:0xcf:0x4a:0x90:0x39:0x96:0x70:0x3d:0xc1:0xa9:0x9e:0x44:0x91:0xfd:0x68:0x4a:0xa8:0xf0:0xaf:0xb9:0xe3:0x96:0xa0:0x40:0x9e:0x78:0x7a:0x44:0x99:0x29:0xca:0x87:0xf8:0x14:0x17:0x31:0xaa:0x88:0x6f:0x6b:0x31:0xd:0xb0:0xc2:0xa:0x18:0xc:0xb2:0x8:0xbb:0x6b:0xeb:0x51:0xc:0x2b:0xf0:0x84:0xa5:0x34:0x1d:0xcf:0xfe:0xa4:0xc7:0x13:0xbc:0xf9:0xbd:0x44:0x68:0x29:0x75:0x75:0xd9:0x37:0x7f:0xf1:0x43:0x31:0xf9:0xff:0x9c:0xe4:0x50:0xa8:0xf:0x40:0x2c:0xb4:0x75:0x4a:0x83:0x73:0xee:0x4b:0x86:0xaa:0x44:0x44:0xee:0xac:0x6d:0x63:0x21:0x46:0x9a:0xa0:0x37:0xde:0xd1:0x30:0xdd:0x6d:0x14:0x2d:0x16:0x23:0x6e:0x42:0xd7:0xe3:0x8c:0x5b:0x56:0x7b:0xa6:0xdd:0x25:0xea:0x21:0x14:0x96:0x8e:0x77:0xb7:0xd4:0x12:0x57:0xb:0xf0:0x28:0x3b:0xcd:0x95:0x4f:0xfa:0xab:0x72:0x68:0xee:0x49:0x4b:0x7a:0xa4:0xa2:0xf5:0x4a:0x7f:0x1b:0x34:0xa0:0x2f:0xca:0x2e:0xa6:0x81:0x2:0xb8:0xd8:0xd:0xa8:0x0:0x48:0x75:0x96:0x97:0x70:0x41:0x9:0xd8:0x2f:0x52:0x24:0xaa:0xf7:0xc6:0x9f:0x41:0x45:0xba:0x76:0xe5:0xe9:0x40:0x13:0x90:0xc2:0x15:0x48:0x9a:0x22:0xf1:0x9b:0x6a:0x66:0x31:0x1:0xd6:0x72:0xa:0xaf:0xa2:0x5c:0xd3:0x4c:0x53:0x99:0xeb:0x95:0xde:0xa6:0xb:0xc3:0x8f:0x4b:0xd6:0x1f:0xd:0xeb:0x68:0xa8:0xd:0x59:0x43:0x77:0xbf:0x74:0x78:0x96:0xe6:0x82:0x45:0x88:0xde:0x18:0xd4:0x32:0xb1:0xc0:0xc7:0x8f:0x66:0xd2:0x52:0xf5:0x1d:0x28:0x15:0x2b:0x13:0x7d:0xd3:0x20:0xd6:0x16:0x97:0x95:0x8a:0xf:0x2b:0x70:0x91:0x70:0xf9:0x6f:0x88:0xcd:0xa1:0x39:0x8d:0x68:0xc8:0xf3:0x3a:0x1a:0xe9:0x58:0x42:0xfe:0x83:0x55:0x7b:0x56:0x75:0x51:0x6c:0xc:0xe6:0xf6:0x1b:0x12:0x66:0xac:0x82:0x5f:0x1c:0xb:0x2d:0xbd:0x44:0xba:0x26:0xd:0xae:0x60:0x27:0x97:0xb8:0x6a:0x95:0x3b:0xbf:0x10:0x91:0x35:0x61:0xfd:0x41:0x47:0xf3:0x5d:0x59:0x5a:0x9:0xdc:0xb9:0x25:0xe7:0xe6:0xe3:0x2b:0xa1:0x9:0x38:0x4f:0x69:0x60:0xe6:0x22:0xca:0x7b:0x5d:0x89:0x8b:0xef:0xbe:0xec:0xec:0x0:0x33:0xe0:0x5d:0x8d:0x3a:0x66:0x69:0xf3:0x8c:0x50:0xda:0x6f:0x7b:0x7b:0x78:0xb4:0xca:0xe1:0x14:0xb0:0x3:0xde:0x2b:0x61:0x67:0xb6:0x50:0x26:0xa2:0x3c:0x26:0xd5:0x1c:0x83:0x62:0x56:0xe9:0xcb:0x4a:0x75:0x1b:0x24:0xe4:0x97:0x9f:0x5c:0x4b:0x69:0x3e:0x5f:0x19:0x41:0x3d:0x44:0xa2:0xa4:0xfa:0xf2:0xca:0x9c:0x2f:0xf0:0x71:0x4b:0x73:0xd4:0xa2:0x5d:0x9f:0xec:0xd2:0xbb:0x10:0xb7:0x52:0xaf:0x13:0x9d:0x18:0x51:0xfc:0x31:0x93:0x39:0x75:0x35:0xdd:0x6f:0x28:0xa8:0xb:0x57:0x98:0x7c:0xa2:0xc:0x50:0x44:0x69:0xf0:0x30:0x3b:0xab:0x40:0xf2:0xfd:0xef:0x6:0x9a:0x7:0x57:0x96:0x38:0xea:0xcf:0xad:0x20:0xac:0x1c:0x48:0x54:0x27:0x9f:0xed:0xa4:0x41:0xf9:0xf4:0x86:0x62:0xe4:0xb6:0x9d:0x8f:0xf7:0x90:0x8c:0xe6:0x96:0x26:0xee:0xed:0xbc:0x26:0xd8:0x8b:0xd4:0xf8:0x38:0xf0:0x40:0x8c:0x18:0xdf:0x79:0xbc:0x20:0x72:0xb0:0xa6:0xd4:0x95:0x5d:0x72:0x24:0x54:0x2:0xb1:0x3a:0x98:0xd7:0x28:0x85:0x94:0x4f:0x5d:0x1f:0x23:0x55:0x57:0x13:0x95:0xe4:0x2b:0x74:0x5d:0xe7:0x95:0xd0:0x98:0x3b:0xa4:0x2d:0x98:0x16:0x51:0xec:0x18:0x2:0x27:0xb0:0xda:0x4f:0x36:0x6e:0x9e:0x93:0x8d:0xc1:0xe9:0xe5:0xd5:0x7e:0xc9:0x0:0xf3:0x26:0xe8:0x88:0xf6:0x80:0xc3:0x9b:0xad:0x5c:0xb1:0xfe:0x48:0xca:0x1:0x6f:0x7a:0xdb:0xbf:0xb0:0x49:0x5d:0x44:0xd6:0x1f:0x2d:0xbb:0xf4:0xab:0x84:0xf4:0x9e:0xab:0xdc:0x26:0xa1:0x5c:0xea:0x3c:0x9:0x46:0xee:0x8:0x8e:0xb8:0x9:0xfe:0x32:0xe4:0xbd:0xe3:0x2d:0x1a:0x27:0x3:0x39:0x54:0xbf:0x2d:0xff:0x43:0x22:0x9e:0xee:0xfe:0xc4:0x90:0x5b:0xae:0xcc:0x64:0xf4:0xba:0x6c:0x83:0x72:0x75:0x81:0xa5:0x59:0x3e:0x88:0x86:0x58:0xaf:0x8a:0x92:0x3:0x49:0xbf:0x2:0x8c:0xe1:0xa0:0x7b:0xe0:0x65:0xb:0x3b:0x13:0xd7:0x9f:0x8:0x92:0xc:0x8b:0x4:0x81:0xc:0xa9:0xdb:0x4a:0x31:0x61:0xa2:0xe0:0xeb:0x34:0xe3:0x34:0xf4:0xe6:0xc1:0xd5:0x86:0x3c:0xb5:0xeb:0x47:0xf0:0xff:0x1e:0x90:0x7:0xb0:0x9c:0x92:0xb5:0x1d:0x9e:0x5e:0xf8:0xe8:0x90:0x5a:0x8a:0x70:0x45:0xbf:0x54:0x7a:0xb3:0x3a:0x3b:0x88:0xc0:0x77:0x3e:0xac:0xbe:0x2e:0xab:0xdc:0xbe:0xb2:0x8d:0x5a:0x44:0x42:0x78:0xe2:0xa0:0x70:0xca:0x30:0xca:0x54:0xa1:0x10:0x13:0xf5:0x8a:0xc6:0x2f:0xc5:0x4f:0xef:0x3c:0x8d:0x9b:0xfa:0xbb:0x46:0xd6:0x7a:0xf8:0x63:0xd4:0x3c:0xa5:0x4c:0x1e:0x46:0xbd:0xe8:0x76:0x87:0x3d:0x17:0x97:0x50:0xc:0x21:0x17:0x3b:0xe6:0x66:0x2b:0x22:0xf3:0xc6:0x1c:0xae:0xd:0xf3:0x28:0x5:0x56:0xfd:0x42:0xfc:0x49:0x60:0x42:0x6:0x49:0xb8:0x8e:0x86:0xd0:0x25:0xd6:0xdc:0x47:0xed:0x18:0x2d:0x53:0x43:0x50:0x46:0x9:0x6c:0xf5:0x16:0x5f:0x1d:0x1c:0xb6:0x1a:0x5e:0xb2:0x64:0xbe:0xf4:0x6a:0x7:0xac:0xf8:0x8d:0x7c:0x1e:0x64:0x59:0x65:0x51:0x71:0x92:0xa5:0xb4:0xe2:0xeb:0xbd:0x4f:0xe0:0xd4:0xae:0xfe:0xf0:0x64:0x18:0x4e:0x16:0x7c:0xc:0xa:0xe7:0x14:0xb7:0xdf:0xa1:0x33:0xfd:0x5:0x8c:0x62:0x57:0xfd:0xf5:0xfc:0xb1:0xd7:0xe7:0x6f:0x26:0xc8:0x43:0xd5:0xc6:0x33:0x39:0xde:0x81:0x50:0x5b:0x8d:0x5a:0x42:0xa1:0x11:0x21:0x43:0x45:0x1f:0x48:0xd1:0x81:0x9f:0xcf:0x76:0x9b:0x80:0x4e:0x83:0xef:0x74:0x4b:0x32:0x49:0x11:0x65:0x83:0xef:0xe6:0xd3:0x4a:0x74:0x2d:0x8c:0x15:0x3f:0xae:0x58:0x84:0xcd:0xa1:0x55:0x4e:0x40:0x24:0xc5:0xdc:0xa5:0x13:0x5f:0x94:0x87:0xaa:0xc7:0xd1:0xbb:0x2c:0x54:0xaa:0x13:0x27:0xf5:0x87:0x54:0x81:0x9c:0x93:0x2f:0xf5:0x17:0xfc:0x96:0x6d:0x4b:0xd6:0x91:0x10:0xb2:0x36:0x23:0x11:0xcb:0xaa:0xbb:0x92:0x7b:0x76:0xbe:0xcf:0x21:0xd1:0xf6:0x16:0x58:0x4b:0x97:0xf5:0xde:0xc7:0xea:0xf6:0xc3:0x80:0x63:0xe:0x56:0xf4:0x1e:0x9:0x2b:0x41:0x1a:0xf6:0xec:0xd6:0x88:0x67:0x4c:0x46:0x37:0x6d:0x18:0x2d:0x83:0x70:0x78:0x1b:0x65:0x57:0xe2:0x4f:0x4d:0xa5:0xcf:0xb0:0xb4:0x26:0xa4:0xd2:0x2f:0xcf:0x14:0x49:0xc5:0x0:0x1f:0x4d:0x67:0x6c:0x94:0x9e:0xd9:0xac:0xcc:0x5d:0x1c:0x44:0x78:0x82:0x9b:0x5a:0xd1:0xe8:0xff:0xa1:0x98:0xb3:0xc7:0x3d:0x86:0xf6:0xc:0x9a:0x3f:0xd2:0x9a:0x5f:0x1f:0x1:0xcb:0xb3:0xa0:0xa4:0x5f:0x6c:0x1:0x7c:0xb0:0x79:0xfe:0x4c:0xd3:0xcf:0x34:0xd3:0x70:0xcd:0x86:0x37:0xa:0xc:0x2d:0x16:0xa6:0x6d:0xe8:0x40:0xcc:0x8:0x42:0x97:0xbb:0xe2:0x3b:0x1b:0x4e:0x3d:0x97:0xfe:0xb6:0x95:0x4a:0x8a:0x64:0x7f:0x5d:0xd5:0x4c:0xe3:0xc:0x56:0xf0:0x3a:0x6c:0x96:0xa7:0x55:0xd7:0x73:0x5d:0x19:0xa:0x18:0xfb:0x45:0x33:0x49:0x82:0xca:0x47:0x39:0x5f:0x92:0xc3:0xc4:0x11:0x20:0x99:0x5d:0x3:0xa5:0xb3:0xf3:0xdf:0x1f:0x8a:0x86:0x74:0x61:0xf9:0xd1:0x7a:0x3:0xea:0x75:0x49:0x1d:0xbe:0xcb:0xe8:0x5:0x4:0x47:0x97:0xc7:0xb:0xa8:0xe7:0xa4:0x5:0xeb:0x4a:0xb8:0xde:0x29:0xd8:0x68:0xb0:0x4c:0xc9:0xa9:0x1e:0x43:0xad:0x8:0xb8:0xf6:0x25:0x76:0xc1:0xd:0x7c:0xc6:0x55:0x13:0x8d:0x60:0xbc:0x75:0x5:0xc1:0x60:0x4f:0x7a:0x3e:0x78:0x52:0xa7:0x28:0x9e:0x70:0xd2:0xbc:0xb4:0x7f:0xc4:0x6c:0x75:0xea:0xe3:0x36:0xf7:0x5f:0xfc:0x4c:0x72:0x8a:0xad:0x2e:0xff:0xb2:0xf0:0x5f:0x1:0x6a:0x9d:0x79:0xbc:0x44:0xa2:0x5a:0xb5:0x74:0x17:0x69:0xf3:0xdb:0xd5:0x68:0xc5:0xb8:0x9e:0xbd:0x17:0x9b:0x9:0x8a:0x25:0xb6:0xb8:0x24:0x68:0xa8:0x83:0x69:0x12:0x20:0xe3:0xce:0x65:0x85:0x29:0x1a:0xf9:0x40:0x83:0xec:0x1b:0x58:0x54:0xe1:0x11:0xf2:0x9e:0x28:0x8d:0xa7:0xb2:0xb2:0x5e:0x6b:0xd6:0xc6:0x13:0x59:0x30:0x26:0x7a:0x13:0xf4:0xdf:0x98:0x1d:0xf9:0x91:0x5d:0x7c:0x7d:0x79:0xd4:0xd1:0x5a:0xe5:0xc3:0xf8:0xe:0x51:0x9f:0xc0:0x3:0xfd:0x2b:0xda:0xc4:0x3f:0x33:0xf4:0x65:0xad:0x7:0x59:0x8c:0x9f:0x77:0x85:0x30:0xd4:0x1:0xad:0x4d:0xd6:0x7e:0xa7:0xbb:0x41:0x9f:0xc9:0x92:0x3f:0x8a:0x96:0x3c:0xb5:0x70:0x0:0xf4:0xa3:0xf4:0x59:0x51:0xfb:0xb3:0xdd:0x9a:0x2a:0x63:0xca:0xfe:0x64:0x77:0x4c:0x3a:0xf5:0xf3:0xf6:0x37:0x93:0xbf:0xc9:0xd2:0x49:0x5f:0xe:0xff:0xcf:0xf:0xf3:0x73:0x3:0x4d:0xc4:0xff:0x0:0xa1:0x99:0x2a:0x4:0x64:0x28:0x69:0xdb:0x74:0xa3:0xd1:0x68:0x99:0x8:0xfb:0x59:0xd1:0xcd:0xa2:0x31:0xdb:0xa1:0x0:0xea:0x95:0x73:0xee:0xe2:0x37:0xed:0xe2:0xd9:0x86:0xc:0xdd:0xea:0x34:0x46:0xc6:0xa9:0xea:0x97:0x11:0x83:0x9f:0xc:0xdc:0x70:0xd9:0x7f:0xa1:0xb4:0x20:0xa2:0x9f:0xb5:0x15:0x8d:0x97:0x4d:0x7a:0x79:0x26:0x0:0x85:0x3:0xeb:0xba:0x4a:0xb1:0x63:0x34:0x48:0x74:0xb7:0xe7:0x80:0x94:0x57:0x59:0x13:0xf9:0xd:0x33:0x9b:0xac:0xe9:0xb0:0x39:0x80:0xfd:0xb3:0xfa:0x23:0xb4:0x7f:0x27:0x9f:0x39:0x71:0x50:0x9c:0xa5:0x98:0x10:0x5c:0x7f:0x90:0xf0:0xd6:0xe9:0x3:import binascii, itertools, gzip, zlib, sys, struct, base64
from collections import Counter
from string import printable

# Fixed hex values - converted from colon-separated to comma-separated
nums = [0x7e, 0x25, 0x1d, 0x2e, 0xd, 0xa4, 0x10, 0xa7, 0x25, 0xbc, 0x37, 0xd9, 0xa5, 0xd3, 0x58, 0x64, 0x13, 0x17, 0xc9, 0x57, 0x70, 0x3e, 0x47, 0x10, 0x50, 0x6b, 0xf4, 0x56, 0xfb, 0x2f, 0x2f, 0x7a, 0x55, 0x4c, 0xa8, 0x62, 0xf0, 0xb8, 0x9, 0x15, 0x74, 0x40, 0xee, 0x19, 0x13, 0x47, 0x7d, 0x27, 0x5e, 0x46, 0x7e, 0xce, 0x85, 0xc5, 0xdf, 0xd5, 0x30, 0xd3, 0x2b, 0x2b, 0x2, 0x5b, 0xa5, 0x57, 0xa7, 0x4d, 0xb9, 0x98, 0x5, 0xc2, 0xad, 0x79, 0x3, 0x9c, 0x93, 0x16, 0xe3, 0x10, 0x3d, 0x41, 0x57, 0xbb, 0xf, 0xdc, 0x80, 0xee, 0xb1, 0xb0, 0xc1, 0xdc, 0xdc, 0xc4, 0x37, 0x81, 0x1b, 0xdf, 0xcf, 0xd5, 0x77, 0xd4, 0x97, 0x24, 0x4e, 0x9a, 0xc0, 0xe1, 0xb1, 0xa3, 0xf1, 0xee, 0xe4, 0x48, 0xaa, 0xf4, 0x24, 0x2a, 0xe2, 0xd5, 0xdb, 0xa4, 0xb2, 0xb7, 0x68, 0xe9, 0x38, 0x83, 0xc8, 0x7, 0x58, 0x3f, 0xdc, 0xf0, 0x64, 0x2a, 0x8a, 0x24, 0xb, 0x3b, 0xc8, 0xfc, 0x2a, 0xac, 0x45, 0xd4, 0xa0, 0x69, 0xfe, 0x83, 0x3f, 0xd9, 0x27, 0xf1, 0x90, 0x8f, 0xda, 0xc9, 0x12, 0xa3, 0xd0, 0x6b, 0xe2, 0xac, 0x5b, 0x46, 0xd6, 0xe5, 0x6b, 0xe1, 0x21, 0x33, 0xde, 0x4b, 0xdf, 0x23, 0x1f, 0x80, 0x8c, 0x1d, 0x3, 0xcb, 0xf7, 0x2a, 0xbc, 0x87, 0xb9, 0x97, 0x50, 0xcb, 0x3a, 0x21, 0x36, 0x1c, 0xcd, 0x91, 0x63, 0xa4, 0x77, 0xce, 0x85, 0x98, 0x1, 0x63, 0xe3, 0xe0, 0x86, 0x2, 0x60, 0x13, 0x1f, 0x63, 0xde, 0x16, 0x8d, 0x9b, 0x9e, 0x46, 0x32, 0xee, 0x12, 0x6c, 0xf, 0x48, 0x88, 0xdd, 0xda, 0xeb, 0x81, 0x51, 0xb9, 0x6, 0xe9, 0xba, 0x6a, 0xcc, 0x9b, 0xf0, 0xce, 0xfb, 0x3, 0xed, 0x5f, 0xe2, 0x4, 0xec, 0x7d, 0xa2, 0x33, 0xaf, 0x90, 0x45, 0x1b, 0xa0, 0x8d, 0xa3, 0x7d, 0x67, 0x8f, 0xfe, 0xb8, 0x48, 0x4, 0xa1, 0x3, 0x6e, 0x6d, 0x9e, 0x5f, 0x3b, 0x99, 0x62, 0x29, 0xf8, 0x44, 0x2d, 0xe5, 0xc1, 0xcf, 0x18, 0x70, 0x5f, 0x5d, 0x8b, 0xff, 0xea, 0x2f, 0x7c, 0x52, 0xbe, 0x7a, 0xa, 0x6, 0x7f, 0xac, 0x9, 0xed, 0x19, 0xa7, 0x4c, 0x55, 0x41, 0xaf, 0x7e, 0x39, 0xf3, 0xab, 0x1e, 0xb5, 0x7a, 0x36, 0x25, 0xd9, 0x93, 0xb1, 0xd9, 0x7e, 0xe0, 0x55, 0xd0, 0x9e, 0xd0, 0xda, 0xa4, 0x4f, 0x86, 0xae, 0x3c, 0xa0, 0x55, 0x89, 0xf5, 0x96, 0x38, 0x73, 0xd0, 0x2b, 0x1e, 0xee, 0xe0, 0x98, 0x25, 0x6, 0x71, 0xb8, 0xb7, 0x4a, 0x36, 0x97, 0xa0, 0x6, 0x35, 0x70, 0xe1, 0xd9, 0xbf, 0x67, 0x87, 0xfb, 0x7, 0xdd, 0x84, 0xfc, 0x73, 0xbc, 0x6f, 0x43, 0xe8, 0x8d, 0x32, 0xc8, 0x25, 0x57, 0xce, 0x97, 0xf, 0x85, 0xe1, 0x46, 0x1c, 0x81, 0x4c, 0x51, 0xf1, 0x2d, 0x2b, 0xb0, 0x95, 0xb2, 0xac, 0x9c, 0x8f, 0x30, 0x99, 0x3, 0xed, 0x8, 0x46, 0xd5, 0x96, 0x78, 0x9d, 0xbb, 0xcf, 0x6c, 0x52, 0xdf, 0xf1, 0x34, 0x25, 0xe, 0xb5, 0x71, 0x5f, 0xa7, 0x9f, 0x8a, 0x57, 0x34, 0x3d, 0x3, 0xd0, 0xcc, 0x34, 0x69, 0xcf, 0x21, 0x72, 0x16, 0xf6, 0x8, 0x8e, 0x93, 0xc3, 0x5e, 0xff, 0x16, 0x3d, 0xf1, 0x4a, 0x62, 0xff, 0xff, 0xd3, 0x5e, 0xa6, 0x72, 0xe9, 0xfe, 0xa6, 0x26, 0x1, 0x77, 0xf2, 0x35, 0xe0, 0xc2, 0x56, 0x52, 0xd8, 0x4c, 0x5a, 0x66, 0xe0, 0x1e, 0xc4, 0xdf, 0x34, 0x1, 0xd0, 0x7e, 0x63, 0xcf, 0x7d, 0x37, 0x2e, 0x24, 0xa9, 0x17, 0x22, 0x50, 0x3d, 0x23, 0xc7, 0x2f, 0x59, 0xa7, 0xf1, 0xaf, 0xfa, 0xc9, 0xfc, 0x54, 0x30, 0xdc, 0x72, 0xf4, 0xbb, 0xa6, 0xf6, 0x8c, 0x24, 0x59, 0x5b, 0xa2, 0x90, 0x89, 0xc6, 0x3a, 0xa0, 0xe8, 0x8a, 0xdd, 0xb, 0x51, 0xd, 0x64, 0xf8, 0xfe, 0x14, 0xf2, 0xc8, 0x10, 0x47, 0xf8, 0xec, 0xb9, 0xec, 0xa7, 0x60, 0xe2, 0x33, 0x84, 0x3c, 0x8f, 0x26, 0xcc, 0x18, 0xec, 0x6, 0xb9, 0xd4, 0x90, 0x96, 0xe0, 0xe1, 0xa3, 0x44, 0xda, 0xa2, 0x58, 0xcc, 0x6a, 0x68, 0x13, 0x62, 0x54, 0xcd, 0x4e, 0xfc, 0x2d, 0x31, 0x2f, 0xb1, 0x6d, 0xbe, 0xd8, 0x39, 0xd7, 0xc4, 0x40, 0x90, 0x99, 0xd0, 0x26, 0x79, 0xb2, 0xca, 0xbd, 0x8c, 0x6c, 0x16, 0x58, 0xd6, 0x7e, 0x6c, 0x38, 0xd3, 0x39, 0x86, 0xcf, 0x66, 0xb7, 0xfe, 0x17, 0x24, 0xbd, 0xef, 0x5e, 0x94, 0xb4, 0x9e, 0x24, 0x4d, 0x6e, 0x4a, 0xc6, 0x20, 0x14, 0x83, 0xac, 0x80, 0x99, 0x5, 0x56, 0x18, 0x71, 0x8e, 0xeb, 0xaa, 0x15, 0xba, 0x10, 0xcc, 0xb8, 0x27, 0xf1, 0x75, 0x17, 0x4f, 0x9, 0xcb, 0xed, 0x2d, 0x18, 0x5b, 0x78, 0xde, 0x7c, 0x8c, 0x61, 0x28, 0xd, 0xfb, 0x2d, 0x63, 0x13, 0x9e, 0xf2, 0xfe, 0x48, 0x7, 0xb8, 0x58, 0xd3, 0x70, 0x80, 0xc4, 0xe6, 0x97, 0x13, 0xef, 0x62, 0x0, 0x1d, 0x7a, 0x5c, 0x95, 0x58, 0xd8, 0x21, 0xb9, 0x0, 0x2e, 0xb4, 0x2e, 0x92, 0xc7, 0xcc, 0x84, 0xc5, 0x15, 0x8b, 0x7d, 0x6d, 0x5e, 0xee, 0xed, 0x23, 0xd4, 0x84, 0x36, 0xc3, 0xe6, 0x37, 0xe0, 0x60, 0x93, 0x75, 0xb8, 0x6b, 0x97, 0x72, 0x6b, 0xc5, 0x26, 0x99, 0x5a, 0x5a, 0x5a, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x4c, 0x6c, 0x59, 0x53, 0x74, 0x72, 0x49, 0x4e, 0x67, 0x5a, 0x2d, 0x31, 0x30, 0x30, 0x31, 0x0]

print("Total numbers:", len(nums))
print("Sample hex values:", [hex(n) for n in nums[:10]])

# Convert to bytes
bytes_data = bytes(nums)
print(f"Converted to {len(bytes_data)} bytes")

print("\n=== DIRECT HEX TO TEXT CONVERSION ===")
try:
    # Try direct decode
    text = bytes_data.decode('utf-8', errors='ignore')
    print("Direct UTF-8 decode (first 200 chars):")
    print(repr(text[:200]))
    
    # Look for readable text and flag patterns
    if any(c.isalpha() for c in text):
        print("\nReadable portions found!")
        
        # Extract readable segments
        readable_segments = []
        current_segment = ""
        for char in text:
            if char.isprintable() and char != '\x00':
                current_segment += char
            else:
                if len(current_segment) > 3:
                    readable_segments.append(current_segment)
                current_segment = ""
        
        if current_segment and len(current_segment) > 3:
            readable_segments.append(current_segment)
            
        print(f"Found {len(readable_segments)} readable segments:")
        for i, segment in enumerate(readable_segments[:10]):  # Show first 10
            print(f"{i+1}: {segment}")
            
    # Look for flag patterns
    flag_patterns = ['CTF{', 'flag{', 'BOOT{', 'FLAG{', 'boot{', '{', '}']
    for pattern in flag_patterns:
        if pattern in text:
            start = text.find(pattern)
            print(f"Found '{pattern}' at position {start}")
            context = text[max(0, start-20):start+50]
            print(f"Context: {repr(context)}")
            
except Exception as e:
    print(f"Direct decode failed: {e}")

print("\n=== SEARCHING FOR FLAG STRINGS ===")
# Look for strings that might contain flags
try:
    # Search for common patterns in the raw bytes
    text_latin1 = bytes_data.decode('latin1')
    
    # Look for specific strings
    search_strings = ['BasicALlYStrINgZ-1001', 'flag', 'CTF', 'BOOT', '{', '}']
    for search_str in search_strings:
        if search_str in text_latin1:
            pos = text_latin1.find(search_str)
            print(f"Found '{search_str}' at position {pos}")
            context = text_latin1[max(0, pos-30):pos+50]
            print(f"Context: {repr(context)}")
            print()
            
    # Look for the specific string we can see in the hex
    if 'BasicALlYStrINgZ' in text_latin1:
        start = text_latin1.find('BasicALlYStrINgZ')
        print(f"*** FOUND: BasicALlYStrINgZ at position {start} ***")
        # This might be our flag!
        flag_context = text_latin1[start:start+50]
        print(f"Potential flag: {repr(flag_context)}")
        
        # Extract just the readable part
        flag_end = flag_context.find('\x00')
        if flag_end != -1:
            potential_flag = flag_context[:flag_end]
        else:
            potential_flag = flag_context
            
        print(f"*** POTENTIAL FLAG: {potential_flag} ***")
        
except Exception as e:
    print(f"Search failed: {e}")

print("\n=== XOR ANALYSIS ===")
# Try XOR with common keys
for xor_key in [0, 1, 255, 127, 42, 69]:
    try:
        xor_data = bytes([b ^ xor_key for b in bytes_data])
        xor_text = xor_data.decode('utf-8', errors='ignore')
        
        if 'flag' in xor_text.lower() or 'ctf' in xor_text.lower() or '{' in xor_text:
            print(f"XOR key {xor_key} produced interesting result:")
            print(repr(xor_text[:100]))
            
    except:
        continue

print("\n=== ANALYSIS COMPLETE ===")
print("Key findings to check:")
print("1. Look for 'BasicALlYStrINgZ-1001' - this might be your flag")
print("2. Check any readable segments for hidden flags")
print("3. The data appears to contain readable ASCII text")]

print("Total numbers:", len(nums))

# Convert to bytes using signed -> unsigned conversion
bytes_data = bytes([(n & 0xFF) for n in nums])
print(f"Converted to {len(bytes_data)} bytes")

# NEW: Try interpreting as hexadecimal values
print("\n=== HEXADECIMAL INTERPRETATION ===")
try:
    # Convert each number to 2-digit hex and join
    hex_string = ''.join([f'{(n & 0xFF):02x}' for n in nums])
    print(f"As hex string ({len(hex_string)} chars):", hex_string[:100] + "...")
    
    # Try to decode hex string as bytes
    try:
        hex_bytes = bytes.fromhex(hex_string)
        hex_text = hex_bytes.decode('utf-8', errors='ignore')
        print("Hex decoded to text:", hex_text[:200])
        
        # Look for flags in hex-decoded text
        for flag_format in ['CTF{', 'flag{', 'BOOT{', 'FLAG{', 'boot{']:
            if flag_format in hex_text:
                start = hex_text.find(flag_format)
                end = hex_text.find('}', start)
                if end != -1:
                    flag = hex_text[start:end+1]
                    print(f"*** FOUND FLAG IN HEX: {flag} ***")
                    
    except Exception as e:
        print(f"Hex decode failed: {e}")
        
    # Try interpreting pairs of numbers as 16-bit hex values
    if len(nums) % 2 == 0:
        hex_pairs = []
        for i in range(0, len(nums), 2):
            val = ((nums[i] & 0xFF) << 8) | (nums[i+1] & 0xFF)
            hex_pairs.append(f'{val:04x}')
        
        hex_pairs_string = ''.join(hex_pairs)
        print(f"As 16-bit hex pairs: {hex_pairs_string[:100]}...")
        
        try:
            pairs_bytes = bytes.fromhex(hex_pairs_string)
            pairs_text = pairs_bytes.decode('utf-8', errors='ignore')
            print("16-bit hex pairs decoded:", pairs_text[:200])
            
            # Look for flags
            for flag_format in ['CTF{', 'flag{', 'BOOT{', 'FLAG{', 'boot{']:
                if flag_format in pairs_text:
                    start = pairs_text.find(flag_format)
                    end = pairs_text.find('}', start)
                    if end != -1:
                        flag = pairs_text[start:end+1]
                        print(f"*** FOUND FLAG IN 16-BIT HEX: {flag} ***")
                        
        except Exception as e:
            print(f"16-bit hex decode failed: {e}")
            
except Exception as e:
    print(f"Hex interpretation failed: {e}")

# Quick search for obvious patterns
print("\n=== Looking for obvious text patterns ===")
try:
    utf8_text = bytes_data.decode('utf-8', errors='ignore')
    print("UTF-8 decode sample:", utf8_text[:200])
    
    # Look for interesting patterns
    if 'LLLINTereStIng91-8977' in utf8_text:
        print("*** FOUND INTERESTING STRING: LLLINTereStIng91-8977 ***")
        
    # Look for common flag formats
    for flag_format in ['CTF{', 'flag{', 'BOOT{', 'FLAG{']:
        if flag_format in utf8_text:
            start = utf8_text.find(flag_format)
            print(f"*** FOUND FLAG FORMAT {flag_format} at position {start} ***")
            print("Context:", utf8_text[max(0, start-20):start+100])
            
except Exception as e:
    print("UTF-8 decode failed:", e)

# Try single-byte XOR with focus on finding flags
print("\n=== XOR Analysis ===")
def find_flags_in_xor():
    flag_candidates = []
    
    for key in range(256):
        try:
            xor_data = bytes([b ^ key for b in bytes_data])
            text = xor_data.decode('utf-8', errors='ignore')
            
            # Look for flag patterns
            for flag_format in ['CTF{', 'flag{', 'BOOT{', 'FLAG{', 'boot{']:
                if flag_format in text:
                    start = text.find(flag_format)
                    end = text.find('}', start)
                    if end != -1:
                        flag = text[start:end+1]
                        flag_candidates.append((key, flag, text[max(0, start-20):end+20]))
                        
            # Also check for high printable content
            printable_ratio = sum(1 for c in text if c.isprintable()) / len(text)
            if printable_ratio > 0.9:
                flag_candidates.append((key, "High printable", text[:100]))
                
        except:
            continue
    
    return flag_candidates

xor_results = find_flags_in_xor()
if xor_results:
    print("XOR Flag candidates:")
    for key, flag, context in xor_results:
        print(f"Key {key}: {flag}")
        print(f"Context: {context}")
        print("-" * 50)
else:
    print("No obvious flags found with single-byte XOR")

# Check the raw bytes for the LLLINTereStIng pattern we saw
print("\n=== Raw byte analysis ===")
try:
    latin1_text = bytes_data.decode('latin1')
    if 'LLL' in latin1_text:
        start = latin1_text.find('LLL')
        print(f"Found 'LLL' pattern at position {start}")
        print("Context:", repr(latin1_text[start:start+50]))
        
        # Extract the interesting string and surrounding context
        interesting_start = latin1_text.find('LLLINTereStIng91-8977')
        if interesting_start != -1:
            print(f"Full interesting string found at position {interesting_start}")
            # Look for more context around it
            context_start = max(0, interesting_start - 100)
            context_end = min(len(latin1_text), interesting_start + 200)
            print("Extended context:", repr(latin1_text[context_start:context_end]))
            
except Exception as e:
    print("Latin1 decode failed:", e)

# Try other common CTF techniques
print("\n=== Other techniques ===")

# Check if it's a known file format
if bytes_data.startswith(b'\x89PNG'):
    print("Detected PNG file!")
elif bytes_data.startswith(b'%PDF'):
    print("Detected PDF file!")
elif bytes_data.startswith(b'PK'):
    print("Detected ZIP file!")

# Try reversing the bytes
reversed_bytes = bytes_data[::-1]
try:
    reversed_text = reversed_bytes.decode('utf-8', errors='ignore')
    for flag_format in ['CTF{', 'flag{', 'BOOT{']:
        if flag_format in reversed_text:
            print(f"Found {flag_format} in REVERSED bytes!")
            start = reversed_text.find(flag_format)
            print("Flag candidate:", reversed_text[start:start+50])
except:
    pass

print("\n=== Summary ===")
print("1. Check the XOR results above for any flag candidates")
print("2. The string 'LLLINTereStIng91-8977' might be a clue or part of the solution")
print("3. If no clear flag emerges, try multi-byte XOR or other advanced techniques")